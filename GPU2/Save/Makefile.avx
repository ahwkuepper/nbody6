chainmode = archain
ksblock   = on

MKOPTIONS = avx=enable
ifeq ($(chainmode), archain)
MKOPTIONS += chainmode=archain
endif
ifeq ($(ksblock), on)
MKOPTIONS += ksblock=on
endif

ifeq ($(chainmode), archain)
 ifeq ($(ksblock), on)
  BINNAME = nbody7b
 else
  BINNAME = nbody7
 endif
else
 ifeq ($(ksblock), on)
  BINNAME = nbody6b
 else
  BINNAME = nbody6
 endif
endif

FC       = gfortran
FFLAGS   = -O3 -Wall -march=core2 -mavx
CXX      = g++ 
CXXFLAGS = -O3 -Wall -march=core2 -mavx

CUDA_PATH = /usr/local/cuda
#SDK_PATH  = /usr/local/cuda_sdk
SDK_PATH  = /usr/local/cuda/samples

NVCC = $(CUDA_PATH)/bin/nvcc
NVCC += -arch=sm_30 -Xptxas -v
NVCC += -I $(SDK_PATH)/common/inc
NVCC += -Xcompiler "-O3 -Wall -fopenmp -mavx"
NVCC += -DWITH_CUDA5

RUNDIR = ./run

all: gpu sse

gpu: gpunb.gpu.o gpupot.gpu.o intgrt.o gpucor.o nbintp.o cnbint.o nbint.o start.o fpoly2a.o adjust.o energy2.o phicor.o cmfirr.o cmfirr2.o checkl2.o kspert.o swap.o scale.o wtime.o cxvpred.o gpuirr.o jpred.o jpred2.o fpcorr2.o repair.o sweep2.o ksres3.o check3.o
	cp -f gpunb.gpu.o gpunb.o
	cp -f gpupot.gpu.o gpupot.o
ifeq ($(ksblock), on)
	cp -f *.o ../Block
	make gpu -C ../Block -f $(shell pwd)/Makefile.ncode -j4 $(MKOPTIONS)
	mv -f ../Block/nbody6 $(RUNDIR)/$(BINNAME).gpu
else
	cp -f *.o ../Ncode
	make gpu -C ../Ncode -f $(shell pwd)/Makefile.ncode -j4 $(MKOPTIONS)
	mv -f ../Ncode/nbody6 $(RUNDIR)/$(BINNAME).gpu
endif

avx: gpunb.avx.o gpupot.avx.o intgrt.o gpucor.o nbintp.o cnbint.o nbint.o start.o fpoly2a.o adjust.o energy2.o phicor.o cmfirr.o cmfirr2.o checkl2.o kspert.o swap.o scale.o wtime.o cxvpred.o gpuirr.o jpred.o jpred2.o fpcorr2.o repair.o sweep2.o ksres3.o check3.o
	cp -f gpunb.avx.o gpunb.o
	cp -f gpupot.avx.o gpupot.o
ifeq ($(ksblock), on)
	cp -f *.o ../Block
	make sse -C ../Block -f $(shell pwd)/Makefile.ncode -j4 $(MKOPTIONS)
	mv -f ../Block/nbody6 $(RUNDIR)/$(BINNAME).avx
else
	cp -f *.o ../Ncode
	make sse -C ../Ncode -f $(shell pwd)/Makefile.ncode -j4 $(MKOPTIONS)
	mv -f ../Ncode/nbody6 $(RUNDIR)/$(BINNAME).avx
endif

cnbint.o: ./lib/cnbint.cpp
	$(CXX) $(CXXFLAGS) -c $^

wtime.o: ./lib/wtime.cpp
	$(CXX) $(CXXFLAGS) -c $^

cxvpred.o: ./lib/cxvpred.cpp
	$(CXX) $(CXXFLAGS) -fopenmp -c $^

#gpuirr.o: ./irrlib/gpuirr.avx.cpp
#	$(CXX) $(CXXFLAGS) -fopenmp -c $^ -o $@
#
#gpuirr.s: ./irrlib/gpuirr.avx.cpp
#	$(CXX) $(CXXFLAGS) -fopenmp -S $^ -o $@
#
gpuirr.o: gpuirr.s
	$(CXX) -c $^ -o $@

gpuirr.s: gpuirr.avx.s
	grep -E -v 'v?movaps\s(%xmm[0-9]+),\s?\1$$' < $^ > $@ #Thanks, Sakuraba

gpuirr.avx.s: irrlib/gpuirr.avx.cpp
	$(CXX) $(CXXFLAGS) -mavx -fopenmp -S $^ -o $@

intgrt.o: intgrt.omp.f
	$(FC) $(FFLAGS) -fopenmp $^ -c -o $@ 

intgrt.s: intgrt.omp.f
	$(FC) $(FFLAGS) -fopenmp $^ -S -o $@

start.o: start.omp.F
	$(FC) $(FFLAGS) -fopenmp $^ -c -o $@

gpunb.gpu.o: lib/gpunb.velocity.cu
	$(NVCC) $^ -c -o $@

gpunb.velocity.su: gpunb.velocity.cubin
	cuobjdump -sass $< | c++filt > $@

gpunb.velocity.cubin: lib/gpunb.velocity.cu
	$(NVCC) -cubin --ptxas-options=-v $<

gpupot.gpu.o: lib/gpupot.gpu.cu
	$(NVCC) $^ -c -o $@

gpunb.avx.o: lib/gpunb.avx.cpp
	$(CXX) $(CXXFLAGS) -fopenmp $^ -c -o $@

gpupot.avx.o: lib/gpupot.avx.cpp
	$(CXX) $(CXXFLAGS) -fopenmp $^ -c -o $@

clean:
	rm -f *.o

clean-all: clean
	make -C ../Ncode -f $(shell pwd)/Makefile.ncode clean
	make -C ../Block -f $(shell pwd)/Makefile.ncode clean
